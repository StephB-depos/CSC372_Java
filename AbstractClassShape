// Abstract class that represents a generic shape
public abstract class Shape {
	// An abstract method "surface_area ()" of return type double
	public abstract double surface_area();
	//An abstract method "volume()" of return type double
	public abstract double volume();
}
// class for sphere that extends abstract Shape class
public class Sphere extends Shape {
	// attribute for radius of sphere
	private double radius;
	// constructor to initialize radius
	public Sphere (double radius) {
		// check that radius is positive
		if (radius <= 0) {
			// throw exception if not with message
			throw new IllegalArgumentException("Invalid: Radius must be positive.");
		}
		// set the radius if its valid
		this.radius = radius;
	}
	// method to compute surface area of sphere
	@Override
	public double surface_area() {
		// surface area formula = 4pi(r)^2
		return 4 * Math.PI * radius * radius;
	}
	// method to compute volume of sphere
	@Override
	public double volume() {
		// volume formula = (4/3)pi(r)^3
		return (4.0 / 3.0) * Math.PI * radius * radius * radius;
	}
	// toString method that prints out the surface area and volume
	@Override
	public String toString() {
		// returns surface area and volume of sphere
		return "\nShephere:\nSurface Area = " + surface_area() + "\nVolume = " + volume();	
	}
}

	// constructor to initialize data
	public Cylinder(double radius, double height) {
		// check for positive num
		if (radius <= 0 || height <= 0) {
			throw new IllegalArgumentException("Invalid: The radius and height must be positive.");
		}
		// set radius if valid
		this.radius = radius;
		// set height if valid
		this.height = height;
	}
	// add method to compute surface area of cylinder
	@Override
	public double surface_area() {
		// surface area formula = 2pi(r)(r+h)
		return 2 * Math.PI * radius *(radius + height);
	}
	// add method to compute the volume of cylinder
	@Override
	public double volume() {
		// volume formula = pi(r)^2(h)
		return Math.PI * radius * radius * height;
	}
	// toString method to print out surface area and volume above
	@Override
	public String toString() {
		// Return surface area and volume of cylinder
		return "\nCylinder:" +"\nSurface Area = " + surface_area() + "\nVolume = " + volume();
	}
}

// our cone class which extends our Shape class
public class Cone extends Shape {
	// attribute radius
	private double radius;
	// attribute for height
	private double height;
	
	// Parameterized constructor to initialize the data
	public Cone(double radius, double height) {
		// check for negative nums
		if (radius<= 0 || height<= 0) {
			// throw exception
			throw new IllegalArgumentException("Invalid: Radius and height must be positive.");
		}
		// set radius and height if valid
		this.radius = radius;
		this.height = height;
	}
	// Method to compute surface area of a CONE
	@Override
	public double surface_area() {
		// calculate the cones slant height by using Pythagorean theorem
		double slantHeight = Math.sqrt(radius * radius + height * height);
		// surface area formula = pi(r)(r + 1)
		return Math.PI * radius * (radius + slantHeight);
	}
	 // method to compute volume of a CONE
	@Override
	public double volume() {
		// volume formula = (1/3)(pi)(r)^2(h)
		return (1.0 / 3.0) * Math.PI * radius * radius * height;
	}
	// toString method to print out surface area and volume
	@Override
	public String toString() {
		// return surface area and volume of cone
		return "\nCone:\nSurface Area = " + surface_area() + "\nVolume = " + volume();
	}
}

//import for handling invalid input
import java.util.InputMismatchException;
// import for user input
import java.util.Scanner;

public class ShapeArray {
	public static void main(String[] args) {
		// create scanner object for user input
		Scanner scanner = new Scanner(System.in);
		
		// array named shapeArray to hold shapes
		Shape[] shapeArray = new Shape[3];
		
		// SPHERE
		// initialize our variable for sphere radius
		double sphereRadius = 0;
		// use while loop until valid input is received
		while(true) {
			// prompt user for radius
			System.out.print("Enter radius for Sphere: ");
			try {
				// read the radius input
				sphereRadius = scanner.nextDouble();
				// check if radius is positive
				if (sphereRadius <= 0) {
					// throw exception if not positive
					throw new IllegalArgumentException("Invalid: Radius must be positive");
				}
				// create sphere object
				shapeArray[0] = new Sphere(sphereRadius);
				// exit the loop if input is valid
				break;
			}
			// catch non numeric input
			catch (InputMismatchException e) {
				// error message
				System.out.println("Invalid: Radius must be a positive number");
				// clear invalid input from scanner
				scanner.next();
			}
			// catch validation exceptions
			catch (IllegalArgumentException e) {
				// error message
				System.out.println(e.getMessage());
			}
		}
		// CYLINDER
		// initialize cylinder radius
		double cylinderRadius = 0;
		// initialize cylinder height
		double cylinderHeight = 0;
		// use while loop to loop until valid input is received
		while (true) {
			// ask user for radius and height space separated
			System.out.print("Enter radius and height for the Cylinder (space-seperated): ");
			try {
				// read the radius input for cylinder
				cylinderRadius = scanner.nextDouble();
				// read the height input for cylinder
				cylinderHeight = scanner.nextDouble();
				
				// check if the radius and height are positive num
				if (cylinderRadius <= 0 || cylinderHeight <= 0) {
					// throw exception
					throw new IllegalArgumentException("Invalid: Radius and Height must be positve.");
				}
				// instantiate one cylinder
				shapeArray[1] = new Cylinder(cylinderRadius, cylinderHeight);
				// exit loop if invalid
				break;
			}
			// catch non-numeric input
			catch (InputMismatchException e) {
				// error message
				System.out.println("Invalid: Please enter a positive numeric value.");
				// clear the scanner
				scanner.nextLine();
			}
			// catch validation exception
			catch (IllegalArgumentException e) {
				System.out.println(e.getMessage());
			}
		}
		// CONE
		// Initialize cone radius variable
		double coneRadius = 0;
		// Initialize cone height variable
		double coneHeight = 0;
		// loop until valid input is received
		while(true) {
			// ask user for radius and height of cone
			System.out.print("Enter the radius and height for Cone (space-seperated): ");
			try {
				// read radius input
				coneRadius = scanner.nextDouble();
				//read height input
				coneHeight = scanner.nextDouble();
				// validate that radius and height are positive nums
				if (coneRadius <= 0 || coneHeight <= 0 ) {
					// throw exception
					throw new IllegalArgumentException("Invalid: Radius and Height must be positive integers.");
				}
				// instantiate cone object
				shapeArray[2] = new Cone(coneRadius, coneHeight);
				// exit the loop is input is valid
				break;
			}
			// catch non-numeric value exception
			catch (InputMismatchException e) {
				// error message
				System.out.println("Invalid: Please enter numeric values for radius and height.");
				// clear invalid input
				scanner.nextLine();
			}
			// catch validation exception
			catch (IllegalArgumentException e) {
				// error message
				System.out.println(e.getMessage());
			}
		}
		// loop through array and print out the instance data of each object using toString method
		for (Shape shape: shapeArray) {
			// use toString method to display details of the shape
			System.out.println("\nShape Details: " + shape);
		}
		// close our scanner
		scanner.close();
	}
}
