import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class SimpleBankGUI {
	// Variable to hold balance
	private double balance;
	// Input field for the initial balance
	private JTextField balanceField;
	// Input field to hold the deposit amount
	private JTextField depositField;
	// Input text field to hold the withdraw amount
	private JTextField withdrawField;
	// Input field to display any messages
	private JTextArea displayArea;

	
	public SimpleBankGUI() {
		// Create the JFrame (main application window)
		JFrame frame = new JFrame("Simple Bank Balance Application");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(400,300);
		// center the frame on the screen
		frame.setLocationRelativeTo(null);
		
		// Create a JPanel for holding components with a GridBagLayout to help have control over components
		JPanel mainPanel = new JPanel(new GridBagLayout());
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.insets = new Insets(10, 10, 10, 10);

		//create panel for initial balance
		gbc.gridx = 0;
		gbc.gridy = 0;
		mainPanel.add(new JLabel("The initial balance is: "), gbc);
		balanceField = new JTextField(10);
		gbc.gridx = 1;
		mainPanel.add(balanceField, gbc);
		
		//create panel for depositing
		gbc.gridx = 0;
		gbc.gridy = 1;
		mainPanel.add(new JLabel("The deposit amount is: "), gbc);
		depositField = new JTextField(10);
		gbc.gridx = 1;
		mainPanel.add(depositField,gbc);
		
		//create panel for depositing
		gbc.gridx = 0;
		gbc.gridy = 2;
		mainPanel.add(new JLabel("The withdrawal amount is: "), gbc);
		withdrawField = new JTextField(10);
		gbc.gridx = 1;
		mainPanel.add(withdrawField,gbc);
		
		JPanel buttonPanel = new JPanel();
		// Create the button for initial balance
		JButton submitButton = new JButton("Set Balance");
		// Create the button for deposit
		JButton depositButton = new JButton("Deposit");
		// Create the button for withdrawal
		JButton withdrawButton = new JButton("Withdraw");
		// Create the button to exit the application
		JButton exitButton = new JButton("Exit");
		
		// Add the buttons to the panel
		buttonPanel.add(submitButton);
		buttonPanel.add(depositButton);
		buttonPanel.add(withdrawButton);
		buttonPanel.add(exitButton);
		
		// Create a text area to display message
		displayArea = new JTextArea(5,30);
		displayArea.setEditable(false);
		JScrollPane scrollPane = new JScrollPane(displayArea);
		
		//Add components to the main panel
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.gridwidth = 2;
		mainPanel.add(buttonPanel, gbc);
		
		gbc.gridy = 4;
		mainPanel.add(scrollPane, gbc);
		
		// action listener for the submit button
		submitButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String initialBalance = balanceField.getText();
				try {
					balance = Double.parseDouble(initialBalance);
					displayArea.append("\nThe initial balance set: $" + balance);
				}
				catch (NumberFormatException ex) {
					displayArea.append("\nInvalid! The initial balance could not be computed.\n");
				}
			}
			
		});
		
		// Action listener for the deposit button
		depositButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String depositAmount = depositField.getText();
				try {
					double deposit = Double.parseDouble(depositAmount);
					balance += deposit;
					displayArea.append("\nAmount Deposited: $" + deposit);
					displayArea.append("\nTotal balance: $" + balance + "\n");
				}
				catch (NumberFormatException ex) {
					displayArea.append("\nInvalid! The deposit balance could not be computed.\n");
				}
			}
		});
		
		// Action Listener for the withdraw button
		withdrawButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String withdrawAmount = withdrawField.getText();
				try {
					double withdraw = Double.parseDouble(withdrawAmount);
					// Add a check to see if sufficient balance is available for a deposit to happen
					if (withdraw <= balance) {
						balance -= withdraw;
						displayArea.append("Amount withdrawn: $" + withdraw);
						displayArea.append("\nTotal balance: $" + balance + "\n");
						
					}
					else {
						displayArea.append("\nInvalid! There is not sufficient funds.");
					}
				}
				catch (NumberFormatException ex) {
					displayArea.append("\nInvalid! The withdrawal balance could not be computed.\n");
				}
			}
		});
		
		// Action listen to exit the program
		exitButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				displayArea.append("\nRemaining Balance: $" + balance + "\n");
				System.exit(0);
			}
		});
		
		// add the panel to the main frame
		frame.add(mainPanel);
		frame.setVisible(true);
	}
	public static void main(String[] args) {
		SwingUtilities.invokeLater(SimpleBankGUI::new);
	}
}
